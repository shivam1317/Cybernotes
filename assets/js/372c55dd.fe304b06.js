"use strict";(self.webpackChunkcybersec_notes=self.webpackChunkcybersec_notes||[]).push([[1459],{3905:function(e,t,i){i.d(t,{Zo:function(){return p},kt:function(){return m}});var n=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=c(i),m=r,y=g["".concat(l,".").concat(m)]||g[m]||u[m]||o;return i?n.createElement(y,a(a({ref:t},p),{},{components:i})):n.createElement(y,a({ref:t},p))}));function m(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=i[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}g.displayName="MDXCreateElement"},62180:function(e,t,i){i.r(t),i.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return g}});var n=i(87462),r=i(63366),o=(i(67294),i(3905)),a=["components"],s={},l="Exploiting cross-site scripting vulnerabilities",c={unversionedId:"portswigger/XSS/Exploiting-XSS-Vulnerabilities",id:"portswigger/XSS/Exploiting-XSS-Vulnerabilities",title:"Exploiting cross-site scripting vulnerabilities",description:"The traditional way to prove that you've found a cross-site scripting vulnerability is to create a popup using the alert() function. This isn't because XSS has anything to do with popups; it's simply a way to prove that you can execute arbitrary JavaScript on a given domain. You might notice some people using alert(document.domain). This is a way of making it explicit which domain the JavaScript is executing on.",source:"@site/docs/portswigger/XSS/Exploiting-XSS-Vulnerabilities.md",sourceDirName:"portswigger/XSS",slug:"/portswigger/XSS/Exploiting-XSS-Vulnerabilities",permalink:"/Cybernotes/docs/portswigger/XSS/Exploiting-XSS-Vulnerabilities",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Content-Security-Policy",permalink:"/Cybernotes/docs/portswigger/XSS/Content-Security-Policy"},next:{title:"Making-use-of-HTML-encoding",permalink:"/Cybernotes/docs/portswigger/XSS/Making-use-of-HTML-encoding"}},p=[{value:"Exploiting cross-site scripting to steal cookies",id:"exploiting-cross-site-scripting-to-steal-cookies",children:[],level:2}],u={toc:p};function g(e){var t=e.components,i=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"exploiting-cross-site-scripting-vulnerabilities"},"Exploiting cross-site scripting vulnerabilities"),(0,o.kt)("p",null,"The traditional way to prove that you've found a ",(0,o.kt)("a",{parentName:"p",href:"https://portswigger.net/web-security/cross-site-scripting"},"cross-site scripting")," vulnerability is to create a popup using the ",(0,o.kt)("inlineCode",{parentName:"p"},"alert()")," function. This isn't because ",(0,o.kt)("a",{parentName:"p",href:"https://portswigger.net/web-security/cross-site-scripting"},"XSS")," has anything to do with popups; it's simply a way to prove that you can execute arbitrary JavaScript on a given domain. You might notice some people using ",(0,o.kt)("inlineCode",{parentName:"p"},"alert(document.domain)"),". This is a way of making it explicit which domain the JavaScript is executing on."),(0,o.kt)("p",null,"Sometimes you'll want to go further and prove that an XSS vulnerability is a real threat by providing a full exploit. In this section, we'll explore three of the most popular and powerful ways to exploit an XSS vulnerability."),(0,o.kt)("h2",{id:"exploiting-cross-site-scripting-to-steal-cookies"},"Exploiting cross-site scripting to steal cookies"),(0,o.kt)("p",null,"Stealing cookies is a traditional way to exploit XSS. Most web applications use cookies for session handling. You can exploit cross-site scripting vulnerabilities to send the victim's cookies to your own domain, then manually inject the cookies into your browser and impersonate the victim."),(0,o.kt)("p",null,"In practice, this approach has some significant limitations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The victim might not be logged in."),(0,o.kt)("li",{parentName:"ul"},"Many applications hide their cookies from JavaScript using the ",(0,o.kt)("inlineCode",{parentName:"li"},"HttpOnly")," flag."),(0,o.kt)("li",{parentName:"ul"},"Sessions might be locked to additional factors like the user's IP address."),(0,o.kt)("li",{parentName:"ul"},"The session might time out before you're able to hijack it.")))}g.isMDXComponent=!0}}]);