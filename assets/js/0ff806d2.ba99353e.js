"use strict";(self.webpackChunkcybersec_notes=self.webpackChunkcybersec_notes||[]).push([[5545],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},12160:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],c={tags:["XXE","xinclude"],image:"https://cdn.acunetix.com/wp-content/uploads/2017/07/11110651/XXE_600x315.png"},l=void 0,s={unversionedId:"portswigger/XXE/XInclude-Attacks",id:"portswigger/XXE/XInclude-Attacks",title:"XInclude-Attacks",description:"What are XInclude Attacks?",source:"@site/docs/portswigger/XXE/XInclude-Attacks.md",sourceDirName:"portswigger/XXE",slug:"/portswigger/XXE/XInclude-Attacks",permalink:"/Cybernotes/docs/portswigger/XXE/XInclude-Attacks",tags:[{label:"XXE",permalink:"/Cybernotes/docs/tags/xxe"},{label:"xinclude",permalink:"/Cybernotes/docs/tags/xinclude"}],version:"current",frontMatter:{tags:["XXE","xinclude"],image:"https://cdn.acunetix.com/wp-content/uploads/2017/07/11110651/XXE_600x315.png"},sidebar:"tutorialSidebar",previous:{title:"Exploiting-blind-XXE-to-exfiltrate-OAST",permalink:"/Cybernotes/docs/portswigger/XXE/Exploiting-blind-XXE-to-exfiltrate-OAST"},next:{title:"XXE-attacks-via-file-upload",permalink:"/Cybernotes/docs/portswigger/XXE/XXE-attacks-via-file-upload"}},p=[{value:"What are XInclude Attacks?",id:"what-are-xinclude-attacks",children:[],level:2},{value:"Challenge",id:"challenge",children:[],level:2}],u={toc:p};function d(e){var t=e.components,c=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,c,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"what-are-xinclude-attacks"},"What are XInclude Attacks?"),(0,o.kt)("p",null,"Some applications receive client-submitted data, embed it on the server-side into an XML document, and then parse the document. An example of this occurs when client-submitted data is placed into a back-end SOAP request, which is then processed by the backend SOAP service."),(0,o.kt)("p",null,"In this situation, you cannot carry out a classic XXE attack, because you don't control the entire XML document and so cannot define or modify a ",(0,o.kt)("inlineCode",{parentName:"p"},"DOCTYPE")," element. However, you might be able to use ",(0,o.kt)("inlineCode",{parentName:"p"},"XInclude")," instead. ",(0,o.kt)("inlineCode",{parentName:"p"},"XInclude")," is a part of the XML specification that allows an XML document to be built from sub-documents. You can place an ",(0,o.kt)("inlineCode",{parentName:"p"},"XInclude")," attack within any data value in an XML document, so the attack can be performed in situations where you only control a single item of data that is placed into a server-side XML document."),(0,o.kt)("p",null,"To perform an ",(0,o.kt)("inlineCode",{parentName:"p"},"XInclude")," attack, you need to reference the ",(0,o.kt)("inlineCode",{parentName:"p"},"XInclude")," namespace and provide the path to the file that you wish to include. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<foo xmlns:xi="http://www.w3.org/2001/XInclude">\n<xi:include parse="text" href="file:///etc/passwd"/></foo>\n')),(0,o.kt)("h2",{id:"challenge"},"Challenge"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This lab has a \"Check stock\" feature that embeds the user input inside a server-side XML document that is subsequently parsed.\nBecause you don't control the entire XML document you can't define a DTD to launch a classic ",(0,o.kt)("a",{parentName:"p",href:"https://portswigger.net/web-security/xxe"},"XXE")," attack.\nTo solve the lab, inject an ",(0,o.kt)("inlineCode",{parentName:"p"},"XInclude")," statement to retrieve the contents of the ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/passwd")," file.")),(0,o.kt)("p",null,"--\x3e so here we can't control XML data so we have to use XInclude which is a part of the XML specification that allows an XML document to be built from sub-documents so i made this payload:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<foo xmlns:xi="http://www.w3.org/2001/XInclude">\n<xi:include parse="text" href="file:///etc/passwd"/></foo>\n')),(0,o.kt)("p",null,"--\x3e Now goto the main application and intercept the ",(0,o.kt)("inlineCode",{parentName:"p"},"check stock")," request and there are 2 params : ",(0,o.kt)("inlineCode",{parentName:"p"},"1)productId")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"2)storeId")," so i url encoded ALL characters and added the payload in both params."),(0,o.kt)("p",null,"Final payload will look like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(5361).Z,width:"1139",height:"677"})),(0,o.kt)("p",null,"After that right click on the request and goto ",(0,o.kt)("inlineCode",{parentName:"p"},"Do intercept -> response to the request.")," and forward the request."),(0,o.kt)("p",null,"And we got the content of ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/passwd")," in response!"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(11448).Z,width:"1045",height:"719"})))}d.isMDXComponent=!0},11448:function(e,t,n){t.Z=n.p+"assets/images/Pastedimage20220303130236-da4ecc881ba032f244b1748b3fe9bddc.png"},5361:function(e,t,n){t.Z=n.p+"assets/images/Pastedimage20220303130733-6a66685ee53acda46ac65ea790f5323f.png"}}]);