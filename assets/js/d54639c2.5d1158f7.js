"use strict";(self.webpackChunkcybersec_notes=self.webpackChunkcybersec_notes||[]).push([[6874],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,g=d["".concat(s,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91853:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],l={tags:["XXE"],image:"https://cdn.acunetix.com/wp-content/uploads/2017/07/11110651/XXE_600x315.png",sidebar_position:2},s=void 0,p={unversionedId:"portswigger/XXE/Exploiting XXE to retrieve files",id:"portswigger/XXE/Exploiting XXE to retrieve files",title:"Exploiting XXE to retrieve files",description:"Exploiting XXE to retrieve Files",source:"@site/docs/portswigger/XXE/Exploiting XXE to retrieve files.md",sourceDirName:"portswigger/XXE",slug:"/portswigger/XXE/Exploiting XXE to retrieve files",permalink:"/Cybernotes/docs/portswigger/XXE/Exploiting XXE to retrieve files",tags:[{label:"XXE",permalink:"/Cybernotes/docs/tags/xxe"}],version:"current",sidebarPosition:2,frontMatter:{tags:["XXE"],image:"https://cdn.acunetix.com/wp-content/uploads/2017/07/11110651/XXE_600x315.png",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"intro",permalink:"/Cybernotes/docs/portswigger/XXE/intro"},next:{title:"Exploiting XXE to perform SSRF attacks",permalink:"/Cybernotes/docs/portswigger/XXE/Exploiting XXE to perform SSRF attacks"}},c=[{value:"Exploiting XXE to retrieve Files",id:"exploiting-xxe-to-retrieve-files",children:[],level:2},{value:"Challenge",id:"challenge",children:[],level:2}],u={toc:c};function d(e){var t=e.components,l=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"exploiting-xxe-to-retrieve-files"},"Exploiting XXE to retrieve Files"),(0,i.kt)("p",null,"To perform an XXE injection attack that retrieves an arbitrary file from the server's filesystem, you need to modify the submitted XML in two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Introduce (or edit) a ",(0,i.kt)("inlineCode",{parentName:"li"},"DOCTYPE")," element that defines an external entity containing the path to the file."),(0,i.kt)("li",{parentName:"ul"},"Edit a data value in the XML that is returned in the application's response, to make use of the defined external entity.")),(0,i.kt)("p",null,"For example, suppose a shopping application checks for the stock level of a product by submitting the following XML to the server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<?xml version="1.0" encoding="UTF-8"?>\n<stockCheck><productId>381</productId></stockCheck>\n')),(0,i.kt)("p",null,"The application performs no particular defenses against XXE attacks, so you can exploit the XXE vulnerability to retrieve the ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/passwd")," file by submitting the following XXE payload:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]> <stockCheck><productId>&xxe;</productId></stockCheck>\n')),(0,i.kt)("p",null,"This XXE payload defines an external entity ",(0,i.kt)("inlineCode",{parentName:"p"},"&xxe;")," whose value is the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/passwd")," file and uses the entity within the ",(0,i.kt)("inlineCode",{parentName:"p"},"productId")," value. This causes the application's response to include the contents of the file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Invalid product ID: root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin ...\n")),(0,i.kt)("h2",{id:"challenge"},"Challenge"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},'This lab has a "Check stock" feature that parses XML input and returns any unexpected values in the response.\nTo solve the lab, inject an XML external entity to retrieve the contents of the ',(0,i.kt)("inlineCode",{parentName:"p"},"/etc/passwd")," file.")),(0,i.kt)("p",null,"--\x3e i intercepted the check stock request and added this before ",(0,i.kt)("inlineCode",{parentName:"p"},"<stockcheck>")," tag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>\n')),(0,i.kt)("p",null,"--\x3e Also i added ",(0,i.kt)("inlineCode",{parentName:"p"},"&xxe;")," before both tags before i don't know which one is vulnerable :"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(47045).Z,width:"1263",height:"653"})),(0,i.kt)("p",null,"--\x3e And i got the content of ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/passwd")),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(2489).Z,width:"1323",height:"837"})))}d.isMDXComponent=!0},2489:function(e,t,n){t.Z=n.p+"assets/images/Pastedimage20220228132558-e91811edcf2ec940ea943fa5862c4ffe.png"},47045:function(e,t,n){t.Z=n.p+"assets/images/Pastedimage20220228132936-38fffe8ecf77e8543bb323c4cb7853ba.png"}}]);