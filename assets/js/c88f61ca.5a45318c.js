"use strict";(self.webpackChunkcybersec_notes=self.webpackChunkcybersec_notes||[]).push([[8778],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,h=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54641:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],s={tags:["SSRF","XXE"],image:"https://cdn.acunetix.com/wp-content/uploads/2017/07/11110651/XXE_600x315.png",sidebar_position:3},l=void 0,p={unversionedId:"portswigger/XXE/Exploiting XXE to perform SSRF attacks",id:"portswigger/XXE/Exploiting XXE to perform SSRF attacks",title:"Exploiting XXE to perform SSRF attacks",description:"Exploiting XXE to perform SSRF attacks",source:"@site/docs/portswigger/XXE/Exploiting XXE to perform SSRF attacks.md",sourceDirName:"portswigger/XXE",slug:"/portswigger/XXE/Exploiting XXE to perform SSRF attacks",permalink:"/Cybernotes/docs/portswigger/XXE/Exploiting XXE to perform SSRF attacks",tags:[{label:"SSRF",permalink:"/Cybernotes/docs/tags/ssrf"},{label:"XXE",permalink:"/Cybernotes/docs/tags/xxe"}],version:"current",sidebarPosition:3,frontMatter:{tags:["SSRF","XXE"],image:"https://cdn.acunetix.com/wp-content/uploads/2017/07/11110651/XXE_600x315.png",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Exploiting XXE to retrieve files",permalink:"/Cybernotes/docs/portswigger/XXE/Exploiting XXE to retrieve files"},next:{title:"Blind XXE",permalink:"/Cybernotes/docs/portswigger/XXE/Blind XXE"}},c=[{value:"Exploiting XXE to perform SSRF attacks",id:"exploiting-xxe-to-perform-ssrf-attacks",children:[],level:2},{value:"challenge",id:"challenge",children:[],level:2}],u={toc:c};function d(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"exploiting-xxe-to-perform-ssrf-attacks"},"Exploiting XXE to perform SSRF attacks"),(0,i.kt)("p",null,"Aside from retrieval of sensitive data, the other main impact of XXE attacks is that they can be used to perform server-side request forgery (SSRF). This is a potentially serious vulnerability in which the server-side application can be induced to make HTTP requests to any URL that the server can access."),(0,i.kt)("p",null,"To exploit an XXE vulnerability to perform an ",(0,i.kt)("a",{parentName:"p",href:"https://portswigger.net/web-security/ssrf"},"SSRF attack"),", you need to define an external XML entity using the URL that you want to target, and use the defined entity within a data value. If you can use the defined entity within a data value that is returned in the application's response, then you will be able to view the response from the URL within the application's response, and so gain two-way interaction with the back-end system. If not, then you will only be able to perform ",(0,i.kt)("a",{parentName:"p",href:"https://portswigger.net/web-security/ssrf/blind"},"blind SSRF")," attacks (which can still have critical consequences)."),(0,i.kt)("p",null,"In the following XXE example, the external entity will cause the server to make a back-end HTTP request to an internal system within the organization's infrastructure:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},'<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://internal.vulnerable-website.com/"> ]>')),(0,i.kt)("h2",{id:"challenge"},"challenge"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},'This lab has a "Check stock" feature that parses XML input and returns any unexpected values in the response.\nThe lab server is running a (simulated) EC2 metadata endpoint at the default URL, which is ',(0,i.kt)("inlineCode",{parentName:"p"},"http://169.254.169.254/"),". This endpoint can be used to retrieve data about the instance, some of which might be sensitive.\nTo solve the lab, exploit the ",(0,i.kt)("a",{parentName:"p",href:"https://portswigger.net/web-security/xxe"},"XXE")," vulnerability to perform an ",(0,i.kt)("a",{parentName:"p",href:"https://portswigger.net/web-security/ssrf"},"SSRF attack")," that obtains the server's IAM secret access key from the EC2 metadata endpoint.")),(0,i.kt)("p",null,"--\x3e So first i tried to add this payload in ",(0,i.kt)("inlineCode",{parentName:"p"},"check stock")," request and changed value of both ",(0,i.kt)("inlineCode",{parentName:"p"},"productId")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"storeId")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"&xxe;")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://169.254.169.254/"> ]>\n')),(0,i.kt)("p",null,"--\x3e I found this error :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"Invalid product ID: latest"\n')),(0,i.kt)("p",null,"--\x3e So i thought it must be some directory and i changed the url with ",(0,i.kt)("inlineCode",{parentName:"p"},"http://169.254.169.254/latest")," and i found another similar error"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"Invalid product ID: meta-data"\n')),(0,i.kt)("p",null,"--\x3e So after keep doing the above method i found ",(0,i.kt)("inlineCode",{parentName:"p"},"iam"),",",(0,i.kt)("inlineCode",{parentName:"p"},"security-credentials"),",",(0,i.kt)("inlineCode",{parentName:"p"},"admin")," directories and i finally found the access tokens and secretAccessKey."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(3711).Z,width:"1881",height:"767"})),(0,i.kt)("p",null,"And we solved the lab!"))}d.isMDXComponent=!0},3711:function(e,t,n){t.Z=n.p+"assets/images/Pastedimage20220228135156-c3bc91722559a36bd6122f1d08277402.png"}}]);